// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.EditProfileDialog = (function(superClass) {
    extend(EditProfileDialog, superClass);

    function EditProfileDialog() {
      EditProfileDialog.__super__.constructor.call(this);
    }

    EditProfileDialog.prototype.show = function(parentController, user) {
      this.parentController = parentController;
      EditProfileDialog.__super__.show.call(this);
      this.customHTML();
      this.negativeButton = this.container.find("." + ComponentsUtils.NEGATIVE_BUTTON);
      this.positiveButton = this.container.find("." + ComponentsUtils.POSITIVE_BUTTON);
      this.firstName = this.container.find('.js--firstName');
      this.lastName = this.container.find('.js--lastName');
      this.street = this.container.find('.js--street');
      this.buildNumber = this.container.find('.js--buildNumber');
      this.city = this.container.find('.js--city');
      this.phoneNumber = this.container.find('.js--phoneNumber');
      this.email = this.container.find('.js--email');
      this.password = this.container.find('.js--password');
      this.password2 = this.container.find('.js--password--2');
      this.firstName.val(user.firstName);
      this.lastName.val(user.lastName);
      this.street.val(user.street);
      this.buildNumber.val(user.buildNumber);
      this.city.val(user.city);
      this.phoneNumber.val(user.phoneNumber);
      return this.email.val(user.email);
    };

    EditProfileDialog.prototype.negativeAction = function() {
      return EditProfileDialog.__super__.negativeAction.call(this);
    };

    EditProfileDialog.prototype.positiveAction = function() {
      var buildNumber, city, data, firstName, lastName, password, password2, passwordValid, phoneNumber, street, valid;
      valid = true;
      firstName = this.firstName.val().trim();
      lastName = this.lastName.val().trim();
      street = this.street.val().trim();
      buildNumber = this.buildNumber.val().trim();
      city = this.city.val().trim();
      phoneNumber = this.phoneNumber.val().trim();
      password = this.password.val().trim();
      password2 = this.password2.val().trim();
      if (firstName !== '') {
        this.firstName.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      } else {
        valid = false;
        this.firstName.addClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (lastName !== '') {
        this.lastName.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      } else {
        valid = false;
        this.lastName.addClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (Validation.phone(phoneNumber)) {
        this.phoneNumber.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      } else {
        valid = false;
        this.phoneNumber.addClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      passwordValid = true;
      if (password !== password2) {
        passwordValid = false;
      }
      if (passwordValid && password !== '') {
        passwordValid = Validation.password(password);
      }
      if (passwordValid) {
        this.password.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
        this.password2.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      } else {
        valid = false;
        this.password.addClass(ComponentsUtils.CSS_INVALID_INPUT);
        this.password2.addClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (!valid) {
        return;
      }
      data = {
        firstName: firstName,
        lastName: lastName,
        street: street,
        buildNumber: buildNumber,
        city: city,
        phoneNumber: phoneNumber,
        password: password
      };
      if (this.parentController && this.parentController.editProfileDialogSuccess) {
        this.parentController.editProfileDialogSuccess(data);
      }
      UserService.changeUserInfo(data, null, this, this._saveSuccess, this._saveError);
      return this.hide();
    };

    EditProfileDialog.prototype.destroy = function() {
      EditProfileDialog.__super__.destroy.call(this);
      return this.parentController = null;
    };

    EditProfileDialog.prototype._customHTML = function() {
      return "<div class='col-7 m-auto h-75 pt-5 flex'> <div class='container w-50'> <div class='form-group'> <label>Ime*</label> <input type='text' class='form-control js--firstName' placeholder='ime'/> </div> <div class='form-group'> <label>Prezime*</label> <input type='text' class='form-control js--lastName' placeholder='prezime'/> </div> <div class='form-group'> <label>Ulica</label> <input type='text' class='form-control js--street' placeholder='ulica'/> </div> <div class='form-group'> <label>Sifra</label> <input type='password' class='form-control js--password' placeholder='********'/> </div> <div class='form-group'> <label>Potvrdi sifru</label> <input type='password' class='form-control js--password--2' placeholder='********'/> </div> </div> <div class='container w-50'> <div class='form-group'> <label>Broj stana</label> <input type='text' class='form-control js--buildNumber' placeholder='broj kuce/stana'/> </div> <div class='form-group'> <label>Grad</label> <input type='text' class='form-control js--city' placeholder='grad'/> </div> <div class='form-group'> <label>Telefon</label> <input type='tel' class='form-control js--phoneNumber' placeholder='telefon'/> </div> <div class='form-group'> <label>Email*</label> <input type='email' class='form-control js--email' disabled='disabled' placeholder='email'/> </div> </div> </div>";
    };

    EditProfileDialog.prototype._saveSuccess = function(data) {
      return FloatingMessage.success(data.message);
    };

    EditProfileDialog.prototype._saveError = function(data) {
      return FloatingMessage.error(data.message);
    };

    return EditProfileDialog;

  })(AbstractDialog);

}).call(this);
