// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.ExpensesPage = (function(superClass) {
    extend(ExpensesPage, superClass);

    function ExpensesPage(workerId) {
      ExpensesPage.__super__.constructor.call(this);
      this.pageHTML();
      if (workerId) {
        ExpenseService.getWorkerExpenses(workerId, null, this, this._expensesLoaded, this._expensesLoadedError);
      } else {
        ExpenseService.getAll(null, this, this._expensesLoaded, this._expensesLoadedError);
      }
      this.clientsAndWorkers = [];
      WorkerService.getAll(null, this, this._loadedClientsSuccess, this._loadedClientsError);
      this.filterContainer = this.container.find('.js--filter--container');
      this.expensesContainer = this.container.find('.js--expenses--container');
      this.autoSuggestion = new AutoSuggestion(this, this.filterContainer, AutoSuggestion.EXPENSE_FILTER);
      this.filterAsInput = this.container.find('.js--filter--as');
      this.suggestionsContainer = this.container.find('.js--filter--suggestions');
      this.filterFrom = this.container.find('.js--filter--from');
      this.filterTo = this.container.find('.js--filter--to');
      this.filterSumFrom = this.container.find('.js--filter--sum--from');
      this.filterSumTo = this.container.find('.js--filter--sum--to');
      this.createExpenseDialog = new CreateExpenseDialog();
    }

    ExpensesPage.prototype.destroy = function() {
      var autoSuggestion;
      ExpensesPage.__super__.destroy.call(this);
      this.autoSuggestion.destroy();
      autoSuggestion = null;
      this.createExpenseDialog.destroy();
      return this.createExpenseDialog = null;
    };

    ExpensesPage.prototype._clickEventHandler = function(event) {
      var target;
      target = $(event.target);
      if (closest(target, '.js--create--expense')) {
        this.createExpenseDialog.show();
      }
    };

    ExpensesPage.prototype._expensesLoaded = function(response) {
      this.expenses = response.data;
      if (this.expenses.length === 0) {
        return this._renderEmptyState();
      } else {
        return this._renderExpensesHTML(this.expenses);
      }
    };

    ExpensesPage.prototype._customHTML = function() {
      return "<div> <nav class='nav justify-content-end pt-3'> <span class='nav-link span-a js--create--expense'>Kreiraj dažbinu</span> </nav> <div class='js--filter--container'> </div> <div class='js--expenses--container'> " + (ComponentsUtils.loadingPage()) + " </div> </div>";
    };

    ExpensesPage.prototype._renderEmptyState = function() {
      return this.expensesContainer.html(ComponentsUtils.emptyState('Nema dažbina'));
    };

    ExpensesPage.prototype._renderExpensesHTML = function(expenses) {
      var expense, html, i, innerHtml, len;
      innerHtml = "";
      for (i = 0, len = expenses.length; i < len; i++) {
        expense = expenses[i];
        innerHtml += "<div class='flex-table js--expense--row' data-bid-id=" + expense.id + "> <div class='flex-table-cell w-20'> <a href='#user/" + expense.expenseCreatedBy + "'>" + expense.expenseCreatedByFullName + "</a> </div> <div class='flex-table-cell w-20'> <a href='#worker/" + expense.moneyGivenBy + "'>" + expense.moneyGivenByFullName + "</a> </div> <div class='flex-table-cell w-20'> " + (ComponentsUtils.getTimeFromMillis(expense.moneyGivenAt)) + " </div> <div class='flex-table-cell w-20'>" + expense.sum + "</div> <div class='flex-table-cell w-20'>" + expense.purpose + "</div> </div>";
      }
      html = "<div class='hide'></div> <div class='flex-table'> <div class='flex-table-cell w-20'>Primio novac</div> <div class='flex-table-cell w-20'>Izručio novac</div> <div class='flex-table-cell w-20'>Datum</div> <div class='flex-table-cell w-20'>Suma</div> <div class='flex-table-cell w-20'>Svrha</div> </div> " + innerHtml + " </div>";
      return this.expensesContainer.html(html);
    };

    ExpensesPage.prototype.triggerFiterSumFrom = function() {
      return this._applyFilter();
    };

    ExpensesPage.prototype.triggerFiterSumTo = function() {
      return this._applyFilter();
    };

    ExpensesPage.prototype.triggerFilterFrom = function() {
      return this._applyFilter();
    };

    ExpensesPage.prototype.triggerFilterTo = function() {
      return this._applyFilter();
    };

    ExpensesPage.prototype.triggerFilterAs = function(event) {
      return ComponentsUtils.handleAutoSuggestion(this.filterAsInput, 'data-id', this.clientsAndWorkers, this.suggestionsContainer, true, this, this._resetFilter);
    };

    ExpensesPage.prototype.triggerFilterSuggestions = function(event) {
      var target;
      target = $(event.target);
      ComponentsUtils.selectFromAutoSuggestion(target, this.filterAsInput, 'data-id', this.clientsAndWorkers, this.suggestionsContainer);
      this._applyFilter();
    };

    ExpensesPage.prototype.triggerFilterReset = function() {
      return this._resetFilter();
    };

    ExpensesPage.prototype._resetFilter = function() {
      this.filterSumFrom.val('');
      this.filterSumTo.val('');
      this.filterFrom.val('');
      this.filterTo.val('');
      this.filterAsInput.val('');
      this.filterAsInput.removeAttr('data-id');
      return this._applyFilter();
    };

    ExpensesPage.prototype._applyFilter = function() {
      var dateFrom, dateTo, expense, filterAs, filtered, filteredByDate, filteredExpenses, i, j, k, len, len1, len2, ref, sumFrom, sumTo, userId;
      sumFrom = this.filterSumFrom.val();
      sumTo = this.filterSumTo.val();
      filteredExpenses = [];
      if (sumFrom || sumTo) {
        if (sumFrom) {
          sumFrom = sumFrom.trim();
        } else {
          sumFrom = 0;
        }
        if (sumTo) {
          sumTo = sumTo.trim();
        } else {
          sumTo = Number.MAX_SAFE_INTEGER;
        }
        ref = this.expenses;
        for (i = 0, len = ref.length; i < len; i++) {
          expense = ref[i];
          if (expense.sum >= sumFrom && expense.sum <= sumTo) {
            filteredExpenses.push(expense);
          }
        }
      } else {
        filteredExpenses = this.expenses.slice();
      }
      if (this.filterFrom.val() || this.filterTo.val()) {
        if (this.filterFrom.val()) {
          dateFrom = new Date(this.filterFrom.val()).getTime();
        } else {
          dateFrom = new Date('1970').getTime();
        }
        if (this.filterTo.val()) {
          dateTo = new Date(this.filterTo.val()).getTime();
        } else {
          dateTo = new Date().getTime();
        }
        filteredByDate = [];
        for (j = 0, len1 = filteredExpenses.length; j < len1; j++) {
          expense = filteredExpenses[j];
          if (expense.moneyGivenAt >= dateFrom && expense.moneyGivenAt <= dateTo) {
            filteredByDate.push(expense);
          }
        }
        filteredExpenses = filteredByDate;
      }
      filterAs = this.filterAsInput.val().trim();
      if (filterAs) {
        filtered = [];
        userId = Number(this.filterAsInput.attr('data-id'));
        for (k = 0, len2 = filteredExpenses.length; k < len2; k++) {
          expense = filteredExpenses[k];
          if (expense.moneyTook === userId) {
            filtered.push(expense);
          }
        }
        filteredExpenses = filtered;
      }
      return this._renderExpensesHTML(filteredExpenses);
    };

    ExpensesPage.prototype._loadedClientsSuccess = function(response) {
      return this.clientsAndWorkers = this.clientsAndWorkers.concat(response.data);
    };

    ExpensesPage.prototype._loadedClientsError = function(response) {
      return console.log('error');
    };

    return ExpensesPage;

  })(AbstractPage);

}).call(this);
