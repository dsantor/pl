// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.ActivityDialog = (function(superClass) {
    extend(ActivityDialog, superClass);

    function ActivityDialog() {
      ActivityDialog.__super__.constructor.call(this);
      this.negativeButtonVisibility(false);
      this.positiveButtonText("Zatvori");
      this.loadedActivity = false;
    }

    ActivityDialog.prototype.show = function(userId) {
      ActivityDialog.__super__.show.call(this);
      if (!this.loadedActivity) {
        return UserActionLogService.getUserActivityLogForUser(userId, null, this, this.s, this.e);
      }
    };

    ActivityDialog.prototype.hide = function() {
      return ActivityDialog.__super__.hide.call(this);
    };

    ActivityDialog.prototype.destory = function() {
      this.actionLogs = null;
      this.loadedActivity = null;
      return ActivityDialog.__super__.destory.call(this);
    };

    ActivityDialog.prototype._customHTML = function() {
      var actionLogs, al, i, len, rowHtml, tableHtml;
      if (!this.loadedActivity) {
        return "<div> <span class='loader-icon'></span> </div>";
      }
      if (this.actionLogs.length === 0) {
        return this._getEmptyState();
      }
      actionLogs = this._prettyPrint(this.actionLogs);
      tableHtml = "<div> <table class='table mb-0'> <tr> <th class='table-text w-20'>Osoba</th> <th class='table-text w-20'>Akcija</th> <th class='table-text w-20'>Vreme</th> </tr> </table> <table class='table table-striped'>";
      rowHtml = "";
      for (i = 0, len = actionLogs.length; i < len; i++) {
        al = actionLogs[i];
        rowHtml = "<tr> <td class='table-text w-20'>" + al.person + "</td> <td class='table-text w-20'>" + al.action + "</td> <td class='table-text w-20'>" + al.time + "</td> </tr>";
      }
      tableHtml += rowHtml;
      tableHtml += "</table></div>";
      return tableHtml;
    };

    ActivityDialog.prototype._getEmptyState = function() {
      return "<div class'container js--page--container'> <div class='col-5 m-auto h-75 pt-5 text-center'>Nema zabele≈æenih aktivnosti</div> </div>";
    };

    ActivityDialog.prototype._prettyPrint = function(actionLogs) {
      var actionLog, i, item, items, len;
      item = {};
      items = [];
      for (i = 0, len = actionLogs.length; i < len; i++) {
        actionLog = actionLogs[i];
        if (actionLog.user) {
          item.person = actionLog.user.firstName + ' ' + actionLog.user.lastName;
        }
        if (actionLog.client) {
          item.person = actionLog.client.firstName + ' ' + actionLog.client.lastName;
        }
        item.action = this._getTypeOfAction(actionLog.type);
        item.time = this._getTime(actionLog.time);
        items.push(item);
      }
      return items;
    };

    ActivityDialog.prototype._getTypeOfAction = function(type) {
      var action;
      action = '';
      switch (type) {
        case 'CREATED_USER':
          action = 'Kreiran korisnik';
          break;
        case 'CREATED_CLIENT':
          action = 'Kreiran klijent';
          break;
        case 'CREATED_BID':
          action = 'Kreirana porudzbina';
          break;
        case 'RESET_PASSWORD':
          action = 'Restartovana sifra';
          break;
        default:
          action = '/';
      }
      return action;
    };

    ActivityDialog.prototype._getTime = function(time) {
      var date, day, month, year;
      date = new Date(time);
      year = date.getFullYear();
      month = date.getMonth();
      day = date.getDate();
      return day + '-' + month + '-' + year;
    };

    ActivityDialog.prototype.s = function(data) {
      this.actionLogs = data.data;
      this.loadedActivity = true;
      return this.refresh();
    };

    ActivityDialog.prototype.e = function(data) {
      return console.log(data);
    };

    return ActivityDialog;

  })(AbstractDialog);

}).call(this);
