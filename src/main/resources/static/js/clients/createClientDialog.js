// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.CreateClientDialog = (function(superClass) {
    extend(CreateClientDialog, superClass);

    function CreateClientDialog() {
      CreateClientDialog.__super__.constructor.call(this);
    }

    CreateClientDialog.prototype.getPageTitle = function() {
      return 'Kreiranje klijenta';
    };

    CreateClientDialog.prototype.show = function(client, parentPage) {
      this.client = client;
      this.parentPage = parentPage;
      CreateClientDialog.__super__.show.call(this);
      this.customHTML();
      this.firstName = this.container.find('.js--firstName');
      this.lastName = this.container.find('.js--lastName');
      this.street = this.container.find('.js--street');
      this.buildNumber = this.container.find('.js--buildNumber');
      this.city = this.container.find('.js--city');
      this.phoneNumber = this.container.find('.js--phoneNumber');
      this.email = this.container.find('.js--email');
      if (this.client) {
        this.firstName.val(this._prettyPrint(this.client.firstName));
        this.lastName.val(this._prettyPrint(this.client.lastName));
        this.street.val(this._prettyPrint(this.client.street));
        this.buildNumber.val(this._prettyPrint(this.client.buildNumber));
        this.city.val(this._prettyPrint(this.client.city));
        this.phoneNumber.val(this._prettyPrint(this.client.phoneNumber));
        return this.email.val(this._prettyPrint(this.client.email));
      }
    };

    CreateClientDialog.prototype.hide = function() {
      return CreateClientDialog.__super__.hide.call(this);
    };

    CreateClientDialog.prototype.destroy = function() {
      this.firstName = null;
      this.lastName = null;
      this.street = null;
      this.buildNumber = null;
      this.city = null;
      this.phoneNumber = null;
      this.email = null;
      this.client = null;
      return this.parentPage = null;
    };

    CreateClientDialog.prototype._customHTML = function() {
      return "<div class='col-7 m-auto h-75 pt-5 flex'> <div class='container w-50'> <div class='form-group'> <label>Email</label> <input type='email' class='form-control js--email' placeholder='email'/> </div> <div class='form-group'> <label>Ime*</label> <input type='text' class='form-control js--firstName' placeholder='ime'/> </div> <div class='form-group'> <label>Prezime*</label> <input type='text' class='form-control js--lastName' placeholder='prezime'/> </div> <div class='form-group'> <label>Ulica</label> <input type='text' class='form-control js--street' placeholder='ulica'/> </div> </div> <div class='container w-50'> <div class='form-group'> <label>Broj stana</label> <input type='text' class='form-control js--buildNumber' placeholder='broj kuce/stana'/> </div> <div class='form-group'> <label>Grad</label> <input type='text' class='form-control js--city' placeholder='grad'/> </div> <div class='form-group'> <label>Telefon*</label> <input type='tel' class='form-control js--phoneNumber' placeholder='telefon'/> </div> </div> </div>";
    };

    CreateClientDialog.prototype.negativeAction = function() {
      return this.hide();
    };

    CreateClientDialog.prototype.positiveAction = function() {
      var buildNumber, city, data, email, firstName, id, lastName, phoneNumber, street, valid;
      valid = true;
      firstName = this._removeShash(this.firstName.val().trim());
      lastName = this._removeShash(this.lastName.val().trim());
      street = this._removeShash(this.street.val().trim());
      buildNumber = this._removeShash(this.buildNumber.val().trim());
      city = this._removeShash(this.city.val().trim());
      phoneNumber = this._removeShash(this.phoneNumber.val().trim());
      email = this._removeShash(this.email.val().trim());
      if (firstName === '') {
        this.firstName.addClass(ComponentsUtils.CSS_INVALID_INPUT);
        valid = false;
      } else {
        this.firstName.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (lastName === '') {
        this.lastName.addClass(ComponentsUtils.CSS_INVALID_INPUT);
        valid = false;
      } else {
        this.lastName.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (Validation.phone(phoneNumber)) {
        this.phoneNumber.removeClass(ComponentsUtils.CSS_INVALID_INPUT);
      } else {
        valid = false;
        this.phoneNumber.addClass(ComponentsUtils.CSS_INVALID_INPUT);
      }
      if (!valid) {
        return;
      }
      id = null;
      if (this.client) {
        id = this.client.id;
      }
      data = {
        id: id,
        firstName: firstName,
        lastName: lastName,
        street: street,
        buildNumber: buildNumber,
        city: city,
        phoneNumber: phoneNumber,
        email: email
      };
      if (this.client) {
        ClientService.update(data, null, this, this._updateClientSuccess, this._updateClientError);
      } else {
        ClientService.save(data, null, this, this._saveClientSuccess, this._saveClientError);
      }
      return this.hide();
    };

    CreateClientDialog.prototype._updateClientSuccess = function(response) {
      if (this.parentPage && this.parentPage.updatedClient) {
        return this.parentPage.updatedClient(response);
      }
    };

    CreateClientDialog.prototype._updateClientError = function(response) {
      return FloatingMessage.error("Izmene nisu uspešno sačuvane, pokušajte ponovo.");
    };

    CreateClientDialog.prototype._saveClientSuccess = function(response) {
      FloatingMessage.success("Kreiran klijent " + response.data.firstName + "  " + response.data.lastName);
      return EventUtils.triggerCreatedNewClient(response.data);
    };

    CreateClientDialog.prototype._saveClientError = function(response) {
      return FloatingMessage.error("Klijent nije uspešno kreiran, pokušajte ponovo.");
    };

    CreateClientDialog.prototype._prettyPrint = function(value) {
      return value || '/';
    };

    CreateClientDialog.prototype._removeShash = function(value) {
      if (value === '/') {
        return '';
      } else {
        return value;
      }
    };

    return CreateClientDialog;

  })(AbstractDialog);

}).call(this);
