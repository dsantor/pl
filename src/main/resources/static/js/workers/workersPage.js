// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.WorkersPage = (function(superClass) {
    extend(WorkersPage, superClass);

    function WorkersPage() {
      WorkersPage.__super__.constructor.call(this);
      this.pageHTML();
      WorkerService.getAll(null, this, this._workersLoadedSuccess, this._workersLoadedError);
      this.createWorkerDialog = new CreateWorkerDialog();
      this.workersContainer = this.container.find('.js--container--workers');
      this.filterContainer = this.container.find('.js--filter--container');
      this.autoSuggestion = new AutoSuggestion(this, this.filterContainer, this.workersContainer, AutoSuggestion.BASE_FILTER);
      this.workerASInput = this.container.find('.js--filter--as');
      this.suggestionsContainer = this.container.find('.js--filter--suggestions');
      this.workerStatus = this.container.find('.js--filter--status');
      this.filterToggleButton = this.container.find('.js--filters--content');
      this.createdNewWorkerEvent = this._createdNewWorkerEventHandler.bind(this);
      EventUtils.bindCreatedNewWorker(this.createdNewWorkerEvent);
    }

    WorkersPage.prototype.destroy = function() {
      WorkersPage.__super__.destroy.call(this);
      this.createWorkerDialog.destroy();
      this.createWorkerDialog = null;
      this.autoSuggestion.destroy();
      this.autoSuggestion = null;
      this.workersContainer = null;
      this.filterContainer = null;
      this.workerASInput = null;
      this.suggestionsContainer = null;
      this.workerStatus = null;
      this.filterToggleButton = null;
      EventUtils.unbindCreatedNewWorker(this.createdNewWorkerEvent);
      return this.createdNewWorkerEvent = null;
    };

    WorkersPage.prototype.getPageTitle = function() {
      return "Radnici";
    };

    WorkersPage.prototype._clickEventHandler = function(event) {
      var id, target;
      target = $(event.target);
      if (closest(target, '.js--create--worker')) {
        this.createWorkerDialog.show();
      }
      if (closest(target, '.js--show--worker')) {
        id = target.attr('data-worker-id');
        window.location.hash = 'worker/' + id;
      }
      return this.suggestionsContainer.addClass('hide');
    };

    WorkersPage.prototype._workersLoadedSuccess = function(response) {
      this.workers = response.data;
      return this._renderWorkersHTML(this.workers);
    };

    WorkersPage.prototype._customHTML = function() {
      var tableHtml;
      tableHtml = "<div> <nav class='nav justify-content-end pt-3'> <span class='nav-link span-a js--create--worker'>Dodaj radnika</span> </nav> <div class='js--filter--container'> </div> <div class='js--container--workers'> " + (ComponentsUtils.loadingPage()) + " </div> </div>";
      return tableHtml;
    };

    WorkersPage.prototype._renderWorkersHTML = function(workers) {
      var i, len, rowHtml, tableHtml, userIcon, w;
      if (workers.length === 0) {
        this.workersContainer.html(this.emptyState());
        return;
      }
      tableHtml = "<table class='table mb-0'> <tr> <th class='table-text w-10'>Profil</th> <th class='table-text w-20'>Ime</th> <th class='table-text w-20'>Prezime</th> <th class='table-text w-20'>Telefon</th> <th class='table-text w-30'>Email</th> </tr> </table> <table class='table table-striped'>";
      rowHtml = "";
      for (i = 0, len = workers.length; i < len; i++) {
        w = workers[i];
        if (w.deleted) {
          userIcon = 'blocked-user-icon';
        } else {
          userIcon = 'user-icon';
        }
        rowHtml = "<tr class='js--user--row' data-worker-id=" + w.id + "> <td class='table-text w-10'><span class='" + userIcon + " js--show--worker' data-worker-id=" + w.id + "></span></td> <td class='table-text w-20'>" + (w.firstName || '/') + "</td> <td class='table-text w-20'>" + (w.lastName || '/') + "</td> <td class='table-text w-20'>" + (w.phoneNumber || '/') + "</td> <td class='table-text w-30'>" + (w.email || '/') + "</td> </tr>";
        tableHtml += rowHtml;
      }
      tableHtml += "</table>";
      return this.workersContainer.html(tableHtml);
    };

    WorkersPage.prototype._workersLoadedError = function(response) {};

    WorkersPage.prototype.emptyState = function() {
      return ComponentsUtils.emptyState('Nema unetih radnika :(', "<input type='button' class='btn btn-primary d-block js--create--worker' value='Dodaj radnika'/>");
    };

    WorkersPage.prototype._getFiltersHTML = function() {
      return ComponentsUtils.baseFilter();
    };

    WorkersPage.prototype.AutoSuggestionKeyUpEventHander = function(event) {
      var target;
      target = $(event.target);
      if (closest(target, '.js--filter--as')) {
        return ComponentsUtils.handleAutoSuggestion(this.workerASInput, 'data-worker-id', this.workers, this.suggestionsContainer, true, this, this._resetFilter);
      }
    };

    WorkersPage.prototype.AutoSuggestionChangeEventHander = function(event) {
      return this._applyFilter();
    };

    WorkersPage.prototype.AutoSuggestionClickEventHander = function(event) {
      var target;
      target = $(event.target);
      if (closest(target, '.js--filter--suggestions')) {
        ComponentsUtils.selectFromAutoSuggestion(target, this.workerASInput, 'data-worker-id', this.workers, this.suggestionsContainer);
        this._applyFilter();
        return;
      }
      if (closest(target, '.js--filter--reset')) {
        this._resetFilter();
        return;
      }
      if (closest(target, '.js--filters--button')) {
        this.filterToggleButton.toggleClass('show');
      }
    };

    WorkersPage.prototype._applyFilter = function() {
      var filteredWorkers, i, id, j, k, len, len1, len2, ref, ref1, status, worker, workers;
      status = this.workerStatus.val();
      workers = [];
      if (status === 'all') {
        workers = this.workers;
      } else if (status === 'active') {
        ref = this.workers;
        for (i = 0, len = ref.length; i < len; i++) {
          worker = ref[i];
          if (!worker.deleted) {
            workers.push(worker);
          }
        }
      } else {
        ref1 = this.workers;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          worker = ref1[j];
          if (worker.deleted) {
            workers.push(worker);
          }
        }
      }
      id = Number(this.workerASInput.attr('data-worker-id'));
      if (!isNaN(id)) {
        filteredWorkers = [];
        for (k = 0, len2 = workers.length; k < len2; k++) {
          worker = workers[k];
          if (worker.id === id) {
            filteredWorkers.push(worker);
          }
        }
        workers = filteredWorkers;
      }
      if (workers.length === 0) {
        return this.autoSuggestion.emptyState();
      } else {
        return this._renderWorkersHTML(workers);
      }
    };

    WorkersPage.prototype._resetFilter = function() {
      this.workerASInput.val('');
      this.workerASInput.removeAttr('data-worker-id');
      this.workerStatus.val(this.workerStatus[0].options[0].value);
      return this._renderWorkersHTML(this.workers);
    };

    WorkersPage.prototype._createdNewWorkerEventHandler = function(event, worker) {
      this.workers.push(worker);
      return this._renderWorkersHTML(this.workers);
    };

    return WorkersPage;

  })(AbstractPage);

}).call(this);
