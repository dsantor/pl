// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.UserPage = (function(superClass) {
    extend(UserPage, superClass);

    function UserPage() {
      UserPage.__super__.constructor.call(this);
      this.pageHTML();
      UserService.getUsers(null, this, this._getUsersSuccess, ajaxCallbackPrintMessage);
      this.filterContainer = this.container.find('.js--filter--container');
      this.usersContainer = this.container.find('.js--users--container');
      this.autoSuggestion = new AutoSuggestion(this, this.filterContainer, AutoSuggestion.BASE_FILTER);
      this.userASInput = this.container.find('.js--filter--as');
      this.suggestionsContainer = this.container.find('.js--filter--suggestions');
      this.userStatus = this.container.find('.js--filter--status');
      this.filterToggleButton = this.container.find('.js--filters--content');
      this.createdNewUser = this._createdNewUser.bind(this);
      EventUtils.bindCreatedNewUser(this.createdNewUser);
      this.users = [];
      this.crateUserDialog = new CreateUserDialog();
    }

    UserPage.prototype.destroy = function() {
      UserPage.__super__.destroy.call(this);
      this.crateUserDialog.destroy();
      this.crateUserDialog = null;
      this.autoSuggestion.destroy();
      this.autoSuggestion = null;
      this.filterContainer = null;
      this.usersContainer = null;
      this.userASInput = null;
      this.suggestionsContainer = null;
      this.userStatus = null;
      this.filterToggleButton = null;
      EventUtils.unbindCreatedNewUser(this.createdNewUser);
      this.createdNewUser = null;
      return this.users = null;
    };

    UserPage.prototype.getPageTitle = function() {
      return 'Korisnici';
    };

    UserPage.prototype._getUsersSuccess = function(response) {
      this.users = response.data;
      return this._renderUsersHTML(this.users);
    };

    UserPage.prototype._renderUsersHTML = function(users) {
      var adminOptionsHtml, firstName, i, lastName, len, phoneNumber, rowHtml, tableHtml, u, userIcon;
      if (users === null || users.length === 0) {
        this.emptyState();
        return;
      }
      tableHtml = "<div> <table class='table mb-0'> <tr> <th class='table-text w-10'>Profil</th> <th class='table-text w-20'>Ime</th> <th class='table-text w-20'>Prezime</th> <th class='table-text w-20'>Telefon</th> <th class='table-text w-30'>Email</th> </tr> </table> <table class='table table-striped'>";
      rowHtml = "";
      for (i = 0, len = users.length; i < len; i++) {
        u = users[i];
        firstName = u.firstName || '/';
        lastName = u.lastName || '/';
        phoneNumber = u.phoneNumber || '/';
        if (window.loggedUserInfo.isAdmin) {
          if (u.active) {
            userIcon = 'user-icon';
          } else {
            userIcon = 'blocked-user-icon';
          }
          adminOptionsHtml = "<td class='table-text w-10'><span class='" + userIcon + " js--show--user' data-user-id=" + u.id + "></span></td>";
        }
        rowHtml = "<tr class='js--user--row' data-user-id=" + u.id + "> " + adminOptionsHtml + " <td class='table-text w-20'>" + firstName + "</td> <td class='table-text w-20'>" + lastName + "</td> <td class='table-text w-20'>" + phoneNumber + "</td> <td class='table-text w-30'>" + u.email + "</td> </tr>";
        tableHtml += rowHtml;
      }
      tableHtml += "</table></div>";
      return this.usersContainer.html(tableHtml);
    };

    UserPage.prototype._customHTML = function() {
      return "<nav class='nav justify-content-end pt-3'> <span class='nav-link span-a js--create--user'>Dodaj korisnika</span> </nav> <div class='js--filter--container'></div> <div class='js--users--container'> " + (ComponentsUtils.loadingPage()) + " </div>";
    };

    UserPage.prototype.emptyState = function() {
      return this.usersContainer.html(this._emptyState());
    };

    UserPage.prototype._emptyState = function() {
      return "<div class='col-5 m-auto h-75 pt-5 text-center'>Nema registrovanih korisnika :(</div>";
    };

    UserPage.prototype._showUserInfo = function(id) {
      var user;
      return user = this._getUserById(id);
    };

    UserPage.prototype._clickEventHandler = function(e) {
      var element, targetElement;
      targetElement = $(e.target);
      element = targetElement.closest('.js--create--user');
      if (element.length > 0) {
        this.crateUserDialog.show();
        return;
      }
      element = targetElement.closest('.js--show--user');
      if (element.length > 0) {
        window.location.hash = "user/" + (element.attr('data-user-id'));
        return;
      }
      element = targetElement.closest('.js--remove--user');
      if (element.length > 0) {
        this._removeUser(element);
      }
    };

    UserPage.prototype._removeUser = function(element) {
      var userId;
      userId = element.attr('data-user-id');
      return UserService.remove(userId, null, this, this._removeUserSuccess, ajaxCallbackPrintMessage);
    };

    UserPage.prototype._removeUserSuccess = function(response) {
      var i, len, ref, u, userId, users;
      userId = response.data;
      $(".js--user--row[data-user-id='" + userId + "']").remove();
      users = [];
      ref = this.users;
      for (i = 0, len = ref.length; i < len; i++) {
        u = ref[i];
        if (u.id !== userId) {
          users.push(u);
        }
      }
      this.users = users;
      if (this.users.length === 0) {
        return this.emptyState();
      }
    };

    UserPage.prototype._createdNewUser = function(event, user) {
      this.users.push(user);
      return this._renderUsersHTML(this.users);
    };

    UserPage.prototype._getUserById = function(id) {
      var i, len, ref, user;
      id = +id;
      ref = this.users;
      for (i = 0, len = ref.length; i < len; i++) {
        user = ref[i];
        if (user.id === id) {
          return user;
        }
      }
      return null;
    };

    UserPage.prototype.userDialogClosed = function() {
      return this._renderUsersHTML(this.users);
    };

    UserPage.prototype.triggerFilterAs = function(event) {
      return ComponentsUtils.handleAutoSuggestion(this.userASInput, 'data-user-id', this.users, this.suggestionsContainer, true, this, this._resetFilter);
    };

    UserPage.prototype.triggerFilterStatus = function(event) {
      return this._applyFilter();
    };

    UserPage.prototype.triggerFilterSuggestions = function(event) {
      var target;
      target = $(event.target);
      ComponentsUtils.selectFromAutoSuggestion(target, this.userASInput, 'data-user-id', this.users, this.suggestionsContainer);
      this._applyFilter();
    };

    UserPage.prototype.triggerFilterReset = function(event) {
      this._resetFilter();
    };

    UserPage.prototype._applyFilter = function() {
      var filteredUsers, i, id, j, k, len, len1, len2, ref, ref1, status, user, users;
      status = this.userStatus.val();
      users = [];
      if (status === 'all') {
        users = this.users;
      } else if (status === 'active') {
        ref = this.users;
        for (i = 0, len = ref.length; i < len; i++) {
          user = ref[i];
          if (!user.deleted) {
            users.push(user);
          }
        }
      } else {
        ref1 = this.users;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          user = ref1[j];
          if (user.deleted) {
            users.push(user);
          }
        }
      }
      id = Number(this.userASInput.attr('data-user-id'));
      if (!isNaN(id)) {
        filteredUsers = [];
        for (k = 0, len2 = users.length; k < len2; k++) {
          user = users[k];
          if (user.id === id) {
            filteredUsers.push(user);
          }
        }
        users = filteredUsers;
      }
      if (users.length === 0) {
        return this.usersContainer.html(this.autoSuggestion.emptyState());
      } else {
        return this._renderUsersHTML(users);
      }
    };

    UserPage.prototype._resetFilter = function() {
      this.userASInput.val('');
      this.userASInput.removeAttr('data-user-id');
      this.userStatus.val(this.userStatus[0].options[0].value);
      return this._renderUsersHTML(this.users);
    };

    return UserPage;

  })(AbstractPage);

}).call(this);
